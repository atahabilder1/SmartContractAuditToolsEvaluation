{
    "path": "artifacts/mcpepe.pdf",
    "project_info": {
        "url": "n/a",
        "commit_id": "n/a",
        "address": "0x7abe58349f38f6cc7cb0a07477fc5e89dc8c04b2",
        "chain": "bsc",
        "compiler_version": [
            "v0.8.19+commit.7dd6d404"
        ],
        "project_path": {
            "McPepe": "contracts/mcpepe/McPepe"
        }
    },
    "findings": [
        {
            "id": 0,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-755"
                ]
            },
            "title": "Unhandled Exception Stops Transfer",
            "description": "The contract uses a try-catch statement in order to perform an external call to the router contract. If the external call throws an exception, then the contract will return from the function call.",
            "severity": "critical",
            "location": "Transfer functionality"
        },
        {
            "id": 1,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-755"
                ],
                "3": [
                    "CWE-392"
                ]
            },
            "title": "Missing Revert Messages",
            "description": "The contract is missing error messages.",
            "severity": "low",
            "location": "Various functions"
        },
        {
            "id": 2,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Price Volatility Concern",
            "description": "The contract accumulates tokens from the taxes to swap them for ETH.",
            "severity": "info",
            "location": "Swap functionality"
        },
        {
            "id": 3,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant SafeMath Library",
            "description": "SafeMath is a popular Solidity library that provides a set of functions for performing common arithmetic operations in a way that is resistant to integer overflows and underflows.",
            "severity": "low",
            "location": "Arithmetic operations"
        },
        {
            "id": 4,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Redundant Storage Keyword",
            "description": "The contract uses the storage keyword in a view function.",
            "severity": "low",
            "location": "View functions"
        },
        {
            "id": 5,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1126"
                ]
            },
            "title": "Immutable Declaration Improvement",
            "description": "The contract is using variables that initialize them only in the constructor.",
            "severity": "low",
            "location": "Constructors and state variables"
        },
        {
            "id": 6,
            "category": {
                "1": [
                    "CWE-710"
                ]
            },
            "title": "State Variables could be Declared Constant",
            "description": "State variables can be declared as constant using the constant keyword.",
            "severity": "low",
            "location": "State variables"
        },
        {
            "id": 7,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1076"
                ]
            },
            "title": "Conformance to Solidity Naming Conventions",
            "description": "The contract does not follow Solidity naming conventions.",
            "severity": "low",
            "location": "Contract naming conventions"
        },
        {
            "id": 8,
            "category": {
                "1": [
                    "CWE-664"
                ],
                "2": [
                    "CWE-221"
                ],
                "3": [
                    "CWE-223"
                ],
                "4": [
                    "CWE-561"
                ]
            },
            "title": "Unused State Variable",
            "description": "An unused state variable is a state variable that is declared in the contract, but is never used in any of the contract's functions.",
            "severity": "low",
            "location": "Contract state variables"
        },
        {
            "id": 9,
            "category": {
                "1": [
                    "CWE-682"
                ]
            },
            "title": "Missing Events Arithmetic",
            "description": "The contract does not include all required events for arithmetic operations.",
            "severity": "low",
            "location": "Events functionality"
        },
        {
            "id": 10,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-1041"
                ]
            },
            "title": "Dead Code Elimination",
            "description": "In Solidity, dead code is code that is written in the contract, but is never executed or reached during normal contract execution.",
            "severity": "low",
            "location": "Various functions"
        },
        {
            "id": 11,
            "category": {
                "1": [
                    "CWE-691"
                ],
                "2": [
                    "CWE-670"
                ],
                "3": [
                    "CWE-667"
                ]
            },
            "title": "Uninitialized Variables in Local Scope",
            "description": "Using an uninitialized local variable can lead to unpredictable behavior and potentially cause errors in the contract.",
            "severity": "low",
            "location": "Local variables usage"
        },
        {
            "id": 12,
            "category": {
                "1": [
                    "CWE-710"
                ],
                "2": [
                    "CWE-573"
                ]
            },
            "title": "Local Scope Variable Shadowing",
            "description": "Local scope variable shadowing occurs when a local variable with the same name as a variable in an outer scope is declared within a function or code block.",
            "severity": "low",
            "location": "Local variables usage"
        },
        {
            "id": 13,
            "category": {
                "1": [
                    "CWE-707"
                ],
                "2": [
                    "CWE-20"
                ]
            },
            "title": "Validate Variable Setters",
            "description": "The contract performs operations on variables that have been configured on user-supplied input without proper validation.",
            "severity": "low",
            "location": "Setter functions"
        },
        {
            "id": 14,
            "category": {
                "1": [
                    "CWE-703"
                ],
                "2": [
                    "CWE-754"
                ],
                "3": [
                    "CWE-252"
                ]
            },
            "title": "Succeeded Transfer Check",
            "description": "The transfer methods should be checked if the result is successful according to the ERC20 specification.",
            "severity": "low",
            "location": "Transfer functionality"
        }
    ]
}