// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

interface ICreatorRoyaltyMinter {
  /**
   * @dev Creates a new token for `to`. Its token ID will be automatically
   * assigned (and available on the emitted {IERC721-Transfer} event), and the token
   * URI autogenerated based on the base URI passed at construction.
   *
   * See {ERC721-_mint}.
   *
   * @param _to - creator address
   * @param _royaltyRate - royalty percentage value from 1 to 10,000. 1 is 0.01%, 10,000 is 100%.
   *
   * Requirements:
   *
   * - the caller must have the `MINTER_ROLE`.
   */
  function mint(address _to, uint16 _royaltyRate, string memory _tokenURI) external returns (uint256);

  /**
   * @dev Returns the creator of the `_tokenId` token.
   *
   * Requirements:
   *
   * - `_tokenId` must exist.
   */
  function creatorOf(uint256 _tokenId) external view returns (address);

  /**
   * @dev Called with the sale price to determine how much royalty is owed and to whom.
   *
   * @param _tokenId - the NFT asset queried for royalty information
   * @param _value - the sale price of the NFT asset specified by _tokenId
   *
   * @return _receiver - address of who should be sent the royalty payment
   * @return _royaltyAmount - the royalty payment amount for _value sale price
   *
   * Requirements:
   *
   * - `_tokenId` must exist.
   */
  function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address _receiver, uint256 _royaltyAmount);
}